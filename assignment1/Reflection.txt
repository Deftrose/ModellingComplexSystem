Reflection
Bowen Bai
969899
According to the output, the program does simulate the behavior of the real system without the main problem which is the mutual exclusion. I used the monitor in JAVA to make the threads avoid this problem.
In this case, when the pilot is trying to get a ship in the waiting zone, or trying to dock or undock, the system should always check whether there are any ships in the waiting zone or the berth. For this problem, we may have some other solutions like setting an infinite loop and check if the condition is fulfilled. However, this solution could consume a lot of resources of the system cause we need to keep that thread running all the time and keep checking the condition continually. With the monitor in JAVA, we can just ask the thread to wait for a while and run again when the value of the condition is updated and notified. For example, when the pilot has arrived in the waiting zone and tried to fetch a ship, but there are no ships there. The thread which called the synchronized method getShip() will be asked to wait until the number of ships in the waiting zone is updated. What's more, using the synchronized keyword to declare that method also prevents this method being used by two or more threads at the same time. The same methods are adopted in some other places of this system.
However, there are also some potential problems in this simulator. For example, instead of using a particular object to observe the debris for the operator, the operator thread will just activate the shield and call the sleep method to wait for the end of debris which may cause some trouble. Consider this special situation, after the operator activating the shield of the berth, the thread will sleep for a period of time, meanwhile, there comes another debris. Obviously, the operator will not update the new debris and will deactivate the shield in this situation which is the simulator's drawback.
To solve the problem mentioned, an object whose responsibility is to observe the debris and notify the operator is in need. When new debris is coming,  the observer will notify the operator so that the operator would activate the shield. There could be a boolean property for this observer which is used to mark the state of debris. When the debris is gone, the state could be changed and the observer would notify the operator, then the operator deactivates the shield instead of making the operator thread sleep to wait for the end of debris.
Overall, the simulator can present the behavior of the real system properly, using the synchronized methods and monitor to prevent the system from mutual exclusions. Allocating tugs can also be implemented by using semaphore which is more complicated than using the monitor. Problems about the operator may be solved by using the strategy mentioned above.