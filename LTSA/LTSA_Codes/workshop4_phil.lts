const AVAILABLE_MAX = 5

PHIL = (sitdown -> right.get -> left.get -> eat -> left.put -> right.put -> standup -> PHIL ).

FORK = ( get -> put -> FORK ).

BUTLER ( I=AVAILABLE_MAX ) = BUT[I],
BUT[v: 0..AVAILABLE_MAX ] = ( when ( v>1 ) tosit -> BUT[v-1] | when (v<5) afterstandup -> BUT[v+1] )/{sitdown/tosit,standup/afterstandup}.

||DINERS( N= 5)
= 
((
forall [i:0..N-1]
	( phil[i]:PHIL
	|| {phil[i].left,phil[((i-1)+N)%N].right }::FORK )
)|| {phil[i:0..4]}::BUTLER(5)).
